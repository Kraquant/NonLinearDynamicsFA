import matplotlib.pyplot as plt
from sympy import symbols, Eq, solve
import math
import numpy as np

# Variable
t0 = 0
tf = 20
steps = 100
q0 = 0
p0 = 0

eps = 1

def solveEulerA(t0, tf , steps , q0, p0):
    dt = (tf - t0)/steps

    tList = [t0]
    qList = [q0]
    pList = [p0]

    for i in range(steps):

        # Solving the implicit equation
        qk1 = symbols('qk1')
        eq1 = Eq(qk1 - qList[i] - dt * 2 * pList[i])
        
        eq1Sol = solve(eq1)

        # Setting the values
        ti1 = tList[i] + dt
        qi1 = eq1Sol[0]
        pi1 = pList[i] - dt * (-12 * eps * (pow(qi1, -13) - pow(qi1, -7)))

        tList.append(ti1)
        qList.append(qi1)
        pList.append(pi1)

    return [tList, qList, pList]

# Solving equation
solEulerA = solveEulerA(t0, tf, steps, q0, p0)

# Plotting values
f, ax = plt.subplots(1)
ax.plot(solEulerA[0], solEulerA[1])
ax.plot(solEulerA[0], solEulerA[2])
ax.grid()

plt.pause(0)